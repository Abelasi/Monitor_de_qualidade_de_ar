#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeMonoOblique9pt7b.h>
#include  <DHT.h>


#include "DHT.h"
#include <ESP8266WiFi.h>
#include "MQ135.h"
#include <Ticker.h>
#include <AsyncMqttClient.h>

#define WIFI_SSID "APTO22--2.0"
#define WIFI_PASSWORD "sucodebatata49"

//conexao MQTT
#define MQTT_HOST "test.mosquitto.org"
#define MQTT_PORT 1883
#define MQTT_PUB_TEMP "esp/dht/temperature"
#define MQTT_PUB_HUM "esp/dht/humidity"
#define MQTT_PUB_AR "esp/mq135/qualidadeAr"

#define ANALOGPIN   A0 //sensor de gas
#define DHTPIN 2       //pin sensor DH11
#define DHTTYPE DHT11       //tipo do sensor


//iniciar sensor
DHT dht(DHTPIN, DHTTYPE);
//declaracao variaveis
float temp;
float hum;
String qualidadeAr;
String quality;
int gasLevel;

AsyncMqttClient mqttClient;
Ticker mqttReconnectTimer;

WiFiEventHandler wifiConnectHandler;
WiFiEventHandler wifiDisconnectHandler;
Ticker wifiReconnectTimer;

unsigned long previousMillis = 0;   // ultima publicação de temperatura 
const long interval = 10000;        // Intervalo leitura sensor

void connectToWifi() {
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
}

void onWifiConnect(const WiFiEventStationModeGotIP& event) {
  Serial.println("Connected to Wi-Fi.");
  connectToMqtt();
}

void onWifiDisconnect(const WiFiEventStationModeDisconnected& event) {
  Serial.println("Disconnected from Wi-Fi.");
  mqttReconnectTimer.detach(); 
  wifiReconnectTimer.once(2, connectToWifi);
}

void connectToMqtt() {
  Serial.println("Connecting to MQTT...");
  mqttClient.connect();
}

void onMqttConnect(bool sessionPresent) {
  Serial.println("Connected to MQTT.");
  Serial.print("Session present: ");
  Serial.println(sessionPresent);
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason) {
  Serial.println("Disconnected from MQTT.");

  if (WiFi.isConnected()) {
    mqttReconnectTimer.once(2, connectToMqtt);
  }
}
void onMqttPublish(uint16_t packetId) {
  Serial.print("Publish acknowledged.");
  Serial.print("  packetId: ");
  Serial.println(packetId);
}

void air_sensor(){
  
  gasLevel = analogRead(ANALOGPIN);  
  
  if(gasLevel<181){
    quality = "  Boa!";
  }
  else if (gasLevel >181 && gasLevel<225){
    quality =  "  Ruim!";
  }
  else if (gasLevel >225 && gasLevel<300){
    quality  = "Muito ruim!";
  }
    else if (gasLevel >300 && gasLevel<350){
    quality  = "Terrível!";
  }
    else{
    quality = " Toxica";   
  }
  
}

void setup() {
  Serial.begin(115200);
    
  dht.begin();
  
  wifiConnectHandler = WiFi.onStationModeGotIP(onWifiConnect);
  wifiDisconnectHandler = WiFi.onStationModeDisconnected(onWifiDisconnect);

  mqttClient.onConnect(onMqttConnect);
  mqttClient.onDisconnect(onMqttDisconnect);
  
  mqttClient.onPublish(onMqttPublish);
  mqttClient.setServer(MQTT_HOST, MQTT_PORT);
   
  connectToWifi();
}

void loop() {
  unsigned long currentMillis = millis();
  
  if (currentMillis - previousMillis >= interval) {
   //salva o tempo da ultima mensagem publicada
    previousMillis = currentMillis;
    //Nova leitura dht
    hum = dht.readHumidity();
    // Read temperature as Celsius (the default)
    temp = dht.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
    //temp = dht.readTemperature(true);
    qualidadeAr = analogRead(ANALOGPIN);  
    
    // faz publicação no topico temperature
    uint16_t packetIdPub1 = mqttClient.publish(MQTT_PUB_TEMP, 1, true, String(temp).c_str());                            
    Serial.printf("Publishing on topic %s at QoS 1, packetId: %i ", MQTT_PUB_TEMP, packetIdPub1);
    Serial.printf("Message: %.2f \n", temp);      

    //Faz publicação no topico humidity
    uint16_t packetIdPub2 = mqttClient.publish(MQTT_PUB_HUM, 1, true, String(hum).c_str());                            
    Serial.printf("Publishing on topic %s at QoS 1, packetId %i: ", MQTT_PUB_HUM, packetIdPub2);
    Serial.printf("Message: %.2f \n", hum);
    //Faz publicação no topico qualidadeAr
    uint16_t packetIdPub3 = mqttClient.publish(MQTT_PUB_AR, 1, true, String(qualidadeAr).c_str());
    Serial.printf("Publishing on topic %s at QoS 1, packetId %i: ", MQTT_PUB_AR, packetIdPub3);
    Serial.printf("Message: %.2f", qualidadeAr);    

  }
}
